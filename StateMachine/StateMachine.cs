// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace StateMachine
{
    using System.Xml;
    using System.Xml.Linq;
    using System.Collections;
    using System;
    
    
    #line 1 "C:\Projects\Fun\StateMachine\StateMachineGenerator\StateMachine\StateMachine.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class StateMachine : StateMachineBase
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            this.Write("\r\n");
            
            #line 8 "C:\Projects\Fun\StateMachine\StateMachineGenerator\StateMachine\StateMachine.tt"

	string initialState = "";
	IList states = new ArrayList();
    IList events = new ArrayList();
	IList transitions = new ArrayList();
	
	XDocument xmlFile = XDocument.Load(xml_file);

    // we assume that the first attribute of Root node is the
    // namespace declaration
    XNamespace ns = xmlFile.Root.FirstAttribute.Value;
    XElement x_scxml = xmlFile.Element(ns + "scxml");
    initialState = x_scxml.Attribute("initial").Value;
    var x_states = x_scxml.Elements(ns + "state");

    foreach (XElement x_state in x_states)
    {
        string startState = x_state.Attribute("id").Value;
        states.Add(startState);
        XElement x_transition = x_state.Element(ns + "transition");
        string trigger = x_transition.Attribute("event").Value;
        events.Add(trigger);
	    string targetState = x_transition.Attribute("target").Value;
		string transition = startState + "|" + trigger + "|" + targetState;  
        transitions.Add(transition);
    }

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Collections;\r\n\r\nnamespace StateMachine\r\n{\r\n\tpublic en" +
                    "um State \r\n\t{\r\n\t\t");
            
            #line 42 "C:\Projects\Fun\StateMachine\StateMachineGenerator\StateMachine\StateMachine.tt"

			string ssep = "";
			foreach(string s in states)
			{
				WriteLine(ssep + s);
				ssep = ",";
			}
		
            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n\tpublic enum Event \r\n\t{\r\n\t\t");
            
            #line 54 "C:\Projects\Fun\StateMachine\StateMachineGenerator\StateMachine\StateMachine.tt"

			string esep = "";
			foreach(string e in events)
			{
				WriteLine(esep + e);
				esep = ",";
			}
		
            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n    public abstract class AbstractStateMachine\r\n    {\r\n        private Stat" +
                    "e _currentState;\r\n        private IList transitions = new ArrayList();\r\n\r\n      " +
                    "  public delegate void Action();\r\n\r\n\t\t");
            
            #line 71 "C:\Projects\Fun\StateMachine\StateMachineGenerator\StateMachine\StateMachine.tt"

			foreach(string t in transitions)
			{
				string[] t_array = t.Split('|'); 
				WriteLine("public abstract void " + t_array[0] + t_array[2] + "Action();"); 
			}
		
            
            #line default
            #line hidden
            this.Write("\r\n        public AbstractStateMachine()\r\n        {\r\n\t\t\t_currentState = State.");
            
            #line 81 "C:\Projects\Fun\StateMachine\StateMachineGenerator\StateMachine\StateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(initialState));
            
            #line default
            #line hidden
            this.Write(@";
			SetupTransitions();
		}

        public State CurrentState
        {
            get { return _currentState; }
			set { _currentState = value; }
        }

		public void FireEvent(Event e)
        { 
            foreach (Transition trans in transitions)
            {
                if (CurrentState == trans.StartState && e == trans.Trigger)
                {
                    CurrentState = trans.EndState;
                    trans.Fire();
                }
            }
        }

		private void SetupTransitions()
		{
            ");
            
            #line 105 "C:\Projects\Fun\StateMachine\StateMachineGenerator\StateMachine\StateMachine.tt"

				//AddTranstition(State.LOCKED, Event.COIN, State.UNLOCKED, unlock);
				//AddTranstition(State.LOCKED, Event.PASS, State.LOCKED, alarm);
				//AddTranstition(State.UNLOCKED, Event.PASS, State.LOCKED, lockAction);
				//AddTranstition(State.UNLOCKED, Event.COIN, State.UNLOCKED, thankYou);
				foreach(string t in transitions)
				{
					string[] t_array = t.Split('|');
					string startState = t_array[0];
					string trigger = t_array[1];
					string targetState = t_array[2];

					Write("AddTransition(");
					Write("ConvertStringToState(\"" + startState + "\"), ");
					Write("ConvertStringToEvent(\"" + trigger + "\"), ");
					Write("ConvertStringToState(\"" + targetState + "\"), ");
					WriteLine("new Action(" + startState + targetState + "Action));");
				}
			
            
            #line default
            #line hidden
            this.Write(@"		}

		private void AddTransition(State start, Event e, State end, Action a)
        {
            transitions.Add(new Transition(start, e, end, a));
        }

		private State ConvertStringToState(string token)
        {
            return (State)Enum.Parse(typeof(State), token);
        }

        private Event ConvertStringToEvent(string token)
        {
            return (Event)Enum.Parse(typeof(Event), token);
        }
    }

	internal class Transition
    {
        private State _startState;
        private Event _trigger;
        private State _endState;
		private AbstractStateMachine.Action _action;

        public Transition(State start, Event e, State end, AbstractStateMachine.Action a)
        {
            _startState = start;
            _trigger = e;
            _endState = end;
            _action = a;
        }

		public State StartState
        {
            get { return _startState; }
        }

		public Event Trigger
        {
            get { return _trigger; }
        }

        public State EndState
        {
            get { return _endState; }
        }

		public AbstractStateMachine.Action Fire
		{
			get { return _action; }
		}
    }
}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class StateMachineBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
